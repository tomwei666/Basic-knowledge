    digraph G{
        edge[
            arrowhead="empty"
        ]
        node[
            shape="record"
        ]
		subgraph cluster_top {

			//bgcolor=gray
			//bgcolor=#000000
			//bgcolor=blue
		    label="hrtimer class"
			fontcolor=red
	        subgraph cluster_1 {
				label="struct \n hrtimer_cpu_base"
					fontcolor=red
					hrtimer_cpu_base [
					label="{<per_cpu> per_cpu(hrtimer_bases)|
						<cpu_base> + active_bases: unsigned int |
						<clock_base> + clock_base: hrtimer_clock_base }"
					]
			}
			subgraph cluster_2 {
				label="sturct \n hrtimer_clock_base"
					fontcolor=red
					hrtimer_clock_base1 [
					label="{<clock_base> clock_base[HRTIMER_BASE_MONOTONIC]|
						+ cpu_base: hrtimer_cpu_base * |
						+ index: int |
						+ clockid_it: clockid_t  |
						<active> + active: timerqueue_head  |
						+ get_time: ktime_t * |
						+ offset: ktime_t }"
					]
					hrtimer_clock_base2 [
					label="{<clock_base>  clock_base[HRTIMER_BASE_TAI]|
						+ cpu_base: hrtimer_cpu_base * |
						+ index: int |
						+ clockid_it: clockid_t  |
						<active> + active: timerqueue_head  |
						+ get_time: ktime_t * |
						+ offset: ktime_t }"
					]
		   }
			subgraph cluster_3 {
				label="struct \n hrtimer"
					bgcolor=red
					hrtimer1 [
					label="{<f0> hrtimer1(HRTIMER_BASE_MONOTONIC)|
						<timerqueue_node> + node: timerqueue_node|
						+ _softexpires: ktime_t |
						+ function: hrtimer_restart  |
						<base> + base: hrtimer_clock_base  |
						+ state: u8 |
						+ is_rel: u8 }"
					]
			}

			subgraph cluster_4 {
				label="struct \n hrtimer"
					bgcolor=gray
					//fontcolor=red
					hrtimer2 [
					label="{<f0> hrtimer2(HRTIMER_BASE_MONOTONIC)|
						<timerqueue_node> + node: timerqueue_node|
						+ _softexpires: ktime_t |
						+ function: hrtimer_restart  |
						<base> + base: hrtimer_clock_base  |
						+ state: u8 |
						+ is_rel: u8 }"
					]
			}

			subgraph cluster_5 {
				label="struct \n hrtimer"
					bgcolor=gray
					//fontcolor=black
					hrtimer3 [
					label="{<f0> hrtimer3(HRTIMER_BASE_MONOTONIC)|
						<timerqueue_node> + node: timerqueue_node|
						+ _softexpires: ktime_t |
						+ function: hrtimer_restart  |
						<base> + base: hrtimer_clock_base  |
						+ state: u8 |
						+ is_rel: u8 }"
					]
			}


			subgraph cluster_6 {
				label="struct \n hrtimer"
					bgcolor=red
					hrtimer4 [
					label="{<f0> hrtimer1(HRTIMER_BASE_TAI)|
						<timerqueue_node> + node: timerqueue_node|
						+ _softexpires: ktime_t |
						+ function: hrtimer_restart  |
						<base> + base: hrtimer_clock_base  |
						+ state: u8 |
						+ is_rel: u8 }"
					]
			}

			subgraph cluster_7 {
				label="struct \n hrtimer"
					bgcolor=gray
					//fontcolor=red
					hrtimer5 [
					label="{<f0> hrtimer2(HRTIMER_BASE_TAI)|
						<timerqueue_node> + node: timerqueue_node|
						+ _softexpires: ktime_t |
						+ function: hrtimer_restart  |
						<base> + base: hrtimer_clock_base  |
						+ state: u8 |
						+ is_rel: u8 }"
					]
			}

			subgraph cluster_8 {
				label="struct \n hrtimer"
					bgcolor=gray
					//fontcolor=black
					hrtimer6 [
					label="{<f0> hrtimer3(HRTIMER_BASE_TAI)|
						<timerqueue_node> + node: timerqueue_node|
						+ _softexpires: ktime_t |
						+ function: hrtimer_restart  |
						<base> + base: hrtimer_clock_base  |
						+ state: u8 |
						+ is_rel: u8 }"
					]
			}

	}

			hrtimer_cpu_base:clock_base->hrtimer_clock_base1:clock_base 
			hrtimer_cpu_base:clock_base->hrtimer_clock_base2:clock_base 
			hrtimer_clock_base1:active->hrtimer1:timerqueue_node
			hrtimer1:timerqueue_node->hrtimer2:timerqueue_node
			hrtimer1:timerqueue_node->hrtimer3:timerqueue_node

			//hrtimer1:base->hrtimer_clock_base1
			//hrtimer2:base->hrtimer_clock_base1
			//hrtimer3:base->hrtimer_clock_base1
			//hrtimer4:base->hrtimer_clock_base2
			//hrtimer5:base->hrtimer_clock_base2
			//hrtimer6:base->hrtimer_clock_base2



			hrtimer_clock_base2:active->hrtimer4:timerqueue_node
			hrtimer4:timerqueue_node->hrtimer5:timerqueue_node
			hrtimer4:timerqueue_node->hrtimer6:timerqueue_node



    }
