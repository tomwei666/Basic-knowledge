1 IDE包含的操作

1.1 Type information for identifier
   "Type information for identifier"可以翻译为"标识符的类型信息"。
   在编程环境中，标识符用来标识变量、函数、类或其他实体的名称。
   "Type information"表示关于标识符所代表的实体的数据类型的信息.

   因此，"Type information for identifiers"的整体含义是获取或了解编程代码中
   标识符的数据类型信息。这通常涉及到在代码编辑器或集成开发环境(IDE)中通过
   代码补全或悬停功能来查看变量、函数等标识符的类型信息，以便程序员更容易
   理解和调试代码。


1.2 Signature Help
   在编程中，Signature Help(签名帮助)是指在调用函数或者方法时，编辑器会显示有关函数或者方法的时，
   编辑器会显示有关函数或者方法的参数信息的功能。这通常包括函数的名称、参数列表和参数的类型。
   Signature Help的目的是帮助程序员更容易地理解和使用代码，减少参数错误而导致的错误。
   具体而言，Signature Help通常包括以下信息:
   1. 函数或方法的名称: 显示正在调用的函数或方法的名称。
   2. 参数列表: 列出函数或方法接受的参数，并在参数之前可能包含逗号。
   3. 参数的类型； 对每个参数给出其预期的数据类型.
   4. 默认值: 如果函数或方法的参数都有默认值，可能还会显示这些默认值。

1.3 Real-time diagnostic display
   "Real-time diagnostic display"可以翻译为"实时诊断显示"。在编程和软件开发领域，
   这通常指的是在编辑器或者集成开发环境(IDE)中提供的实时错误和警告信息显示。
   这种实时诊断显示可以包括以下内容:
   1) 实时错误提示：当你编写代码时，编辑器会即时检测到语法错误、编译错误或其他潜在
   问题，并在代码中标记或其他方式提示你.
   2) 警告信息： 编辑器也可能实时监测到潜在的问题或不推荐的代码实践，以警告的形式
   提示你，帮助你改进代码的质量.
   3) 代码建议: 一些编辑器还可能根据你的代码上下文提供实时的代码建议，帮助你更快地
   完成代码.

1.4 Go to include/declaration/definition (GoTo, etc.)
	在编程环境中的一个功能，允许程序员快速导航到包含(include)文件、声明或定义某个
	标识符(如函数、变量、类等)的位置。
	这个功能通常成为"Go To"，而具体的选项如下:
	1) Go to Include(转到包含): 如果你正在使用编程语言中的模块、头文件或其他包含文件，
	   这个选项可以让你迅速跳转到当前文件引用的其他文件.
	2) Go to Declaration(转到声明): 允许你快速跳转到标识符(例如变量、函数等)的声明
		位置。这对于理解标识符的类型和用法很有帮助.
	3) Go to Declaration(转到定义): 允许你快速跳转到标识符的实际定义位置。这对于深入
	    了解代码实现和进行调试很有用。

1.5 Go to alternate file (e.g. associated header GoToAlternateFile)  
	"Go to alternate file"的中文翻译可以是"转到备用文件"或"跳转到替代文件"。这通常
	是指在编辑器中的一个功能，允许程序员快速地在源文件和相关的备用文件(通常是头文件
	或实现文件)之间切换.

	对于"associated header GoToAlternateFile",翻译为"相关的头文件转到备用文件"。
	在C和C++等语言中，头文件与源码文件相关联，头文件包含了函数和变量的声明，而
	源文件包含了其具体的实现。因此，这个功能允许在头文件和源文件之间进行快速导航

	这些功能通常在集成开发环境(IDE)或者高级文本编辑器中提供，通过快捷键或上下文
	菜单激活。这些的功能有助于程序员在开发过程中轻松地切换并查看与当前文件相关联
	的其他文件，提高代码的可读性和维护性。

   使用场景:
   1) 怎么定义源文件和备份文件.
   2) 使用什么命令定义源文件和备份文件.

1.6 Find Symbol (GoToSymbol), with interactive search
   这通常是指在编程环境中的一个功能，允许程序员通过交互式搜索快速查找并导航到代码中的符号（如函数、变量、类等）。
   具体而言:
   1)Find Symbol（查找符号）： 通过输入符号的名称，编辑器将会在整个项目中查找匹配的符号，并提供一个列表供用户选择。
   2) GoToSymbol（转到符号）： 选定或搜索到符号后，该功能允许用户跳转到该符号的定义或声明的位置.
   3) Interactive Search（交互式搜索); 这表示搜索过程是交互式的，通常是通过用户在搜索框中输入字符或
   关键字，并即时看到匹配的符号，以便更快地导航。

1.7 Document outline (GoToDocumentOutline), with interactive search
  允许程序员通过交互式搜索快速查看和导航文档的大纲结构。
  具体而言:
  1) Document Outline（文档大纲）： 显示当前文档的结构和层次，包括各个部分、章节、函数、类等的列表。这使得程序员可以更轻松地了解和导航整个文档。
  2) GoToDocumentOutline（转到文档大纲）： 通过激活这个功能，用户可以快速跳转到文档的大纲视图，以便查看整个文档的结构。
  3) Interactive Search（交互式搜索）： 这表示搜索过程是交互式的，通常是通过用户在搜索框中输入字符或关键字，并即时看到匹配的文档结构，以便更快地导航。

  说明: vim的F2的功能

1.8 View documentation comments for identifiers (GetDoc)
	在编程环境中的一个功能,允许程序员查看代码标识符(如变量、函数、类等)的文档注释.
	具体而言:
	1) View documentation comments（查看文档注释）： 提供一种方式，让程序员能够轻松地查看与代码中的标识符相关的文档注释，
	   以便了解标识符的用途、参数说明、返回值描述等信息。
	2) GetDoc（获取文档）： 这可能是一个触发查看文档注释功能的操作或命令。

1.9 Perform refactoring
    在编程领域，重构是指对代码进行结构上的改变，以改进其设计、可读性、维护性或性能，而不改变其功能。



   
  说明: 
  1) 这个可以在公司的代码中加上注释文档，并且通过注释可以查看得到。
        支持vim/vscode等插件
  2) 通过一个具体的例子，例如内核或者其他开源软件来实现.


1.7 这通常是指在编程环境中的一个功能，允许程序员通过交互式搜索快速查看和导航文档的大纲结构。

    




	


1.5


2. 编程语言基础 

2.1 identifier
   identifier是用来标识程序中变量、函数、类模块或其他用户的实体的名称。
   标识符是一种命名规则，它允许程序员为程序中的各种元素命名，
   以便更容易理解和管理代码。

2.2 声明(Declaration)和定义(Definition)的区别
   1) 声明(Declaration):
	   含义:声明是对一个标识符(例如变量、函数、类等)进行介绍或告知编译器该标识符
	   的存在机器类型，但并不为其分配存储空间或提供具体实现.
	   示例：
	   extern int x; //变量x的声明
	   void myFuction(); //函数myFuction的声明
	2) 定义(Definition)
	   含义:定义是为了一个标识符分配内存空间或提供具体实现，使其在程序中有了具体的
	   存在。定义包括声明的信息，同时还分配了存储空间。
	   示例:
	   int x=10; //定义x的定义，同时也是声明
	   void myFuction() {/*函数myFuction的定义*/}


  




