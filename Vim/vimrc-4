" .vimrc - Vim configuration file.
"
" Copyright (c) 2010 Jeffy Du. All Rights Reserved.
"
" Maintainer: Jeffy Du <jeffy.du@gmail.com>
"    Created: 2010-01-01
" LastChange: 2010-04-22

" GENERAL SETTINGS: {{{1
" To use VIM settings, out of VI compatible mode.
set nocompatible
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
"




" 1. plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
Plugin 'preservim/nerdtree'
Plugin 'ycm-core/YouCompleteMe'

" 2. plugin on vim-scripts GitHub repo
Plugin 'mru.vim'
Plugin 'taglist.vim'
"Plugin 'OmniCppComplete'


" 3. plugin not on GitHub repo



" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required

" 1. Switching between buffers.
" 方便ctrl-h,在各个buffer之间切换
nnoremap <C-h> <C-W>h
nnoremap <C-j> <C-W>j
nnoremap <C-k> <C-W>k
nnoremap <C-l> <C-W>l
inoremap <C-h> <Esc><C-W>h
inoremap <C-j> <Esc><C-W>j
inoremap <C-k> <Esc><C-W>k
inoremap <C-l> <Esc><C-W>l

" 2. Space to command mode.
nnoremap <space> :
vnoremap <space> :




" Enable file type detection.
filetype plugin indent on
" Syntax highlighting.
syntax on
" Setting colorscheme
color mycolor
" Other settings.
set   autoindent
set   autochdir
set   autoread
set   autowrite
set   background=dark
set   backspace=indent,eol,start
set   nobackup
set   cindent
set   cinoptions=:0
set   cursorline
set   completeopt=longest,menuone
set   noexpandtab
set   fileencodings=utf-8,gb2312,gbk,gb18030
set   fileformat=unix
set   foldenable
set   foldmethod=marker
set   guioptions-=T
set   guioptions-=m
set   guioptions-=r
set   guioptions-=l
set   helpheight=10
set   helplang=cn
set   hidden
set   history=100
set   hlsearch
set   ignorecase
set   incsearch
set   laststatus=2
set   number
set   pumheight=10
set   ruler
set   scrolloff=5
set   shiftwidth=4
"set   shiftwidth=20 
set   showcmd
set   smartindent
set   smartcase
set   tabstop=4
set   termencoding=utf-8
"set   textwidth=80
set   whichwrap=h,l
set   wildignore=*.bak,*.o,*.e,*~
set   wildmenu
set   wildmode=list:longest,full
"set   nowrap
set   cc=80


" AUTO COMMANDS: {{{1
" auto expand tab to blanks
"autocmd FileType c,cpp set expandtab
" Restore the last quit position when open file.
autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \     exe "normal g'\"" |
    \ endif

" SHORTCUT SETTINGS: {{{1
"Set mapleader
let mapleader=","

" "cd" to change to open directory.
let OpenDir=system("pwd")
nmap <silent> <leader>cd :exe 'cd ' . OpenDir<cr>:pwd<cr>

cnoremap <expr> %% getcmdtype( ) == ':' ? expand('%:h').'/' : '%%'

" YouCompleteMe
" let g:ycm_global_ycm_extra_conf=/home/tom/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/tests/clang/testdata/.ycm_extra_conf.py
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/ycmd/tests/clang/testdata/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '/work1/PTG-4.5/buildsystem/yocto/meta-semidrive/.ycm_extra_conf.py'
let g:ycm_confirm_extra_conf = 0
let g:ycm_complete_in_comments = 1
let g:ycm_complete_in_strings = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_collect_identifiers_from_tags_files = 1
let g:ycm_collect_identifiers_from_comments_and_strings = 1
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_warning_symbol = '**'
let g:ycm_error_symbol = '->'
"let g:ycm_language_server = 
  "[ 
     "{
        "'name': 'rust',
        "'cmdline': [ 'rust-analyzer' ],
        "'filetypes': [ 'rs' ]
     "},
     "{
        "'name': 'zig',
        "'cmdline': [ 'zls' ],
        "'filetypes': [ 'zig' ]
     "},
     "{
        "'name': 'python',
        "'cmdline': ['pylsp'],
        "'filetypes': ['py']
     "},
     "{
        "'name': 'java',
        "'cmdline': ['/bin/bash/','/home/diego/bin/jdtls/jdtls'],
        "'filetypes': ['java']
     "},
     "{
        "'name': 'go',
        "'cmdline': ['gopls'],
        "'filetypes': ['go']
     "},
     "{
        "'name': 'scala',
        "'cmdline': ['metals'],
        "'rootPatterns': ['build.sbt'],
        "'filetypes': ['scala', 'sbt']
     "},  
     "{
        "'name': 'v',
        "'cmdline': ['v','ls','--socket'],
        "'port': 5007,
        "'filetypes': ['v']
     "},
     "{
         "'name': 'cpp',
         "'cmdline': ['clangd'],
         "'filetypes': ['cpp'] 
     "},
     "{
        "'name': 'js',
        "'cmdline': ['typescript-language_server', '--stdio'],
        "'filetypes': ['js', 'jsx', 'ts', 'tsx']
     "},
     "{
        "'name': 'crystal',
        "'cmdline': ['/home/diego/bin/crystalline'],
        "'filetypes': ['cr']
     "},
   "]
nnoremap <C-g> :YcmCompleter GoToDefinitionElseDeclaration<CR>
"nnoremap <C-r> :YcmCompleter GoToReferences<CR>
nnoremap <Leader>gr :YcmCompleter GoToReferences<CR>
nnoremap <Leader>gt :YcmCompleter GoToType<CR>
nnoremap <Leader>gd :YcmCompleter GoToDocumentOutline <CR>
nnoremap <leader>yfw <Plug>(YCMFindSymbolInWorkspace)
nnoremap <leader>yfd <Plug>(YCMFindSymbolInDocument)
set completeopt=popup


" PLUGIN SETTINGS: {{{1
" 1. taglist.vim
let g:Tlist_Auto_Update=1
let g:Tlist_Process_File_Always=1
let g:Tlist_Exit_OnlyWindow=1
let g:Tlist_Show_One_File=1
let g:Tlist_WinWidth=25
let g:Tlist_Enable_Fold_Column=0
let g:Tlist_Auto_Highlight_Tag=1

" 2. NERDTree.vim
let g:NERDTreeWinPos="right"
let g:NERDTreeWinSize=25
let g:NERDTreeShowLineNumbers=1
let g:NERDTreeQuitOnOpen=1
" cscope.vim
if has("cscope")
    set csto=1
    set cst
    set nocsverb
    if filereadable("cscope.out")
        cs add cscope.out
    endif
    set csverb
endif
" 3. OmniCppComplete.vim
"let g:OmniCpp_DefaultNamespaces=["std"]
"let g:OmniCpp_MayCompleteScope=1
"let g:OmniCpp_SelectFirstItem=2
" VimGDB.vim
if has("gdb")
	set asm=0
	let g:vimgdb_debug_file=""
	run macros/gdb_mappings.vim
endif
" LookupFile setting
let g:LookupFile_TagExpr='"./tags.filename"'
let g:LookupFile_MinPatLength=2
let g:LookupFile_PreserveLastPattern=0
let g:LookupFile_PreservePatternHistory=1
let g:LookupFile_AlwaysAcceptFirst=1
let g:LookupFile_AllowNewFiles=0
" Man.vim
source $VIMRUNTIME/ftplugin/man.vim
" snipMate
let g:snips_author="Du Jianfeng"
let g:snips_email="cmdxiaoha@163.com"
let g:snips_copyright="SicMicro, Inc"
" plugin shortcuts
function! RunShell(Msg, Shell)
	echo a:Msg . '...'
	call system(a:Shell)
	echon 'done'
endfunction
nmap  <F2> :TlistToggle<cr>
nmap  <F3> :NERDTreeToggle<cr>
nmap  <F4> :MRU<cr>
"#nmap  <F5> <Plug>LookupFile<cr>
nmap  <F6> :vimgrep /<C-R>=expand("<cword>")<cr>/ **/*.c **/*.h<cr><C-o>:cw<cr>
nmap  <F9> :call RunShell("Generate tags", "ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .")<cr>
nmap <F10> :call HLUDSync()<cr>
"nmap <F11> :call RunShell("Generate filename tags", "~/.vim/shell/genfiletags.sh")<cr>
nmap <leader>ft :call RunShell("Generate filename tags", "~/.vim/shell/genfiletags.sh")<cr>
nmap <F12> :call RunShell("Generate cscope", "cscope -Rbq")<cr>:cs add cscope.out<cr>
nmap <leader>sa :cs add cscope.out<cr>
nmap <leader>ss :cs find s <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sg :cs find g <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sc :cs find c <C-R>=expand("<cword>")<cr><cr>
nmap <leader>st :cs find t <C-R>=expand("<cword>")<cr><cr>
nmap <leader>se :cs find e <C-R>=expand("<cword>")<cr><cr>
nmap <leader>sf :cs find f <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>si :cs find i <C-R>=expand("<cfile>")<cr><cr>
nmap <leader>sd :cs find d <C-R>=expand("<cword>")<cr><cr>
nmap <leader>zz <C-w>o
nmap <leader>gs :GetScripts<cr>
"cscope快捷键的映射
nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>
" CSCOPE
" add any cscope database in current directory
"if filereadable("cscope.out")
	"cs add cscope.out
"else add the database pointed to by environment variable
"elseif $CSCOPE_DB != ""
	"cs add $CSCOPE_DB
"endif

"cscopequickfix
set cscopequickfix=s-,c-,d-,i-,t-,e-

"Automatically fitting a quickfix window height
"au FileType qf call AdjustWindowHeight(3, 6)
 "function! AdjustWindowHeight(minheight, maxheight)
"let l = 1
"let n_lines = 0
"let w_width = winwidth(0)
"while l <= line('$')
  "" number to float for division
"let l_len = strlen(getline(l)) + 0.0
"let line_width = l_len/w_width
"let n_lines += float2nr(ceil(line_width))
"let l += 1
"endw
"exe max([min([n_lines, a:maxheight]), a:minheight]) . "wincmd _"
"endfunction
"set mouse=h
"set cscopequickfix=c-,d-,e-,g-,i-,s-,t-
